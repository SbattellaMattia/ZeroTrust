services:

 #Simula client esterno
 external_client:
  image: alpine:latest
  container_name: external-client
  command: sh -c "while true; do sleep 3600; done"
  networks:
   - external_net

 # Bastion host 
 bastion-host:
  image: binlab/bastion
  container_name: bastion-host
  hostname: bastion-host
  restart: unless-stopped
  expose:
    - 22/tcp
  ports:
    - 22222:22/tcp
  environment:
    PUBKEY_AUTHENTICATION: "true"
    GATEWAY_PORTS: "false"
    PERMIT_TUNNEL: "false"
    X11_FORWARDING: "false"
    TCP_FORWARDING: "true"
    AGENT_FORWARDING: "true"
  volumes:
    - ./bastion-host/authorized_keys:/var/lib/bastion/authorized_keys:ro
    - ./bastion-host/ssh:/usr/etc/ssh:rw
  extra_hosts:
    - docker-host:172.17.0.1
  networks:
    - dmz_net

 # Squid Proxy (forward proxy in DMZ)
 squid-proxy:
  image: ubuntu/squid:latest
  container_name: squid-proxy
  ports:
   - "3128:3128"
  networks:
   - dmz_net
  volumes:
   - ./squid/squid.conf:/etc/squid/squid.conf
  ulimits:
   nofile:
    soft: "65536"
    hard: "65536"
  command: squid -N -d 1

 # Envoy Proxy (PEP)
 pep-envoy:
  image: envoyproxy/envoy:v1.35.1
  container_name: pep-envoy
  volumes:
   - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml
  networks:
   - dmz_net
   - internal_net
  ports:
   - "10000:10000"
   
 # OPA (PDP)
 pdp-opa:
  image: openpolicyagent/opa:latest-envoy
  container_name: pdp-opa
  networks:
   - dmz_net
   - internal_net
  command: >
   run --server
   --set=plugins.envoy_ext_authz_grpc.addr=:9191
   --set=plugins.envoy_ext_authz_grpc.query=data.envoy.authz.allow
   --bundle /policies
  volumes:
   - ./opa/policies:/policies:ro
  ports:
   - "9191:9191"   # gRPC plugin port OPA -> Envoy gRPC
   
 internal-service:
  image: hashicorp/http-echo:0.2.3
  container_name: internal-service
  command: ["-text", "hello from internal", "-listen", ":8080"]
  networks:
   - internal_net

# Postgres (DBMS interno)
 postgres:
  image: postgres:latest
  container_name: postgres
  environment:
   POSTGRES_USER: root
   POSTGRES_PASSWORD: root
   POSTGRES_DB: companydb
  networks:
   - internal_net
  ports:
   - "5432:5432"
  volumes:
   - ./postgres/data:/var/lib/postgresql/data

 trust-service:
  build:
    context: ./trust-service
    dockerfile: Dockerfile
  container_name: trust-service
  environment:
    DATABASE_URL: "postgresql://trust_user:trust_pass@postgres:5432/companydb" #Sono utenti diversi dal root di Postgres
    T_SCALE_MINUTES: "1440"    # default: 1 giorno
    PORT: "5000"
  networks:
    - internal_net
  depends_on:
    - postgres



#====================== DA CONFIGURARE ======================

# Splunk (SIEM / Log Management)
 splunk:
  image: splunk/splunk:latest
  container_name: splunk
  environment:
   SPLUNK_START_ARGS: "--accept-license"
   SPLUNK_PASSWORD: changeme123
  ports:
   - "8000:8000"   # Web UI
   - "8088:8088"   # HTTP Event Collector
  networks:
   - dmz_net
   - internal_net
  volumes:
   - ./splunk/etc:/opt/splunk/etc
   - ./splunk/var:/opt/splunk/var   

# Snort IDS/IPS
 snort:
  image: frapsoft/snort
  container_name: snort
  cap_add:
    - NET_ADMIN
    - NET_RAW
  networks:
    - dmz_net
    - internal_net
  command: snort -i eth0 -A console -c /etc/snort/snort.conf                   #IDS
  #command: snort -Q --daq afpacket -i eth0:eth1 -c /etc/snort/snort.conf      #IPS
  volumes:
    - ./snort/snort.conf:/etc/snort/snort.conf:ro


#Firewall con nftables
 #nftables:
  #image: networkstatic/nftables
  #container_name: nftables
  #cap_add:
    #- NET_ADMIN
  #networks:
   #- external_net
   #- dmz_net
   #- internal_net
  #volumes:
   #- ./nftables/nftables.conf:/etc/nftables.conf
  #command: ["nft", "-f", "/etc/nftables.conf"]
    

networks:
 external_net:
  driver: bridge
 dmz_net:
  driver: bridge
 internal_net:
  driver: bridge
